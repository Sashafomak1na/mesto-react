{"ast":null,"code":"export class Api {\n  constructor(baseUrl, headers) {\n    this._url = baseUrl;\n    this._headers = headers;\n  }\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  //получить данные пользователя\n  getUserInfoApi() {\n    return fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n  //изменить данные пользователя\n  setUserInfoApi(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.username,\n        about: data.useroccupation\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  //добавить новую карточку\n  addNewCards(data) {\n    return fetch(`${this._url}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  //добавить лайк\n  sendLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  //убрать лайк\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  //удалить конкретную карточку\n  deleteCardApi(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  //изменить аватар\n  setUserAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  //проверка ответа, вывод ошибки и  ее статус кода\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка : ${res.status}`);\n  }\n}\nconst api = new Api({\n  adress: 'https://mesto.nomoreparties.co/v1/cohort-71',\n  token: 'ec265280-7716-4c4b-b105-f3dcaf615320'\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_url","_headers","getInitialCards","fetch","method","then","res","_checkResponse","getUserInfoApi","setUserInfoApi","data","body","JSON","stringify","name","username","about","useroccupation","addNewCards","link","sendLike","cardId","deleteLike","deleteCardApi","setUserAvatar","avatar","ok","json","Promise","reject","status","api","adress","token"],"sources":["/Users/alekandrafomakina/mesto-react/src/utils/Api.js"],"sourcesContent":["export class Api {\n    constructor(baseUrl, headers) {\n        this._url = baseUrl;\n        this._headers = headers;\n    }\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n        method: \"GET\", \n        headers: this._headers})\n        .then((res) => this._checkResponse(res));\n    }\n    //получить данные пользователя\n    getUserInfoApi() {\n        return fetch(`${this._url}/users/me`,{\n        method: \"GET\",\n        headers: this._headers})\n        .then((res) => this._checkResponse(res));\n    }\n    //изменить данные пользователя\n    setUserInfoApi(data) {\n        return fetch(`${this._url}/users/me`, {\n          method: \"PATCH\",\n          headers: this._headers,\n          body: JSON.stringify({\n            name: data.username,\n            about: data.useroccupation,\n          }),\n        }).then((res) => this._checkResponse(res));\n    }\n    \n      //добавить новую карточку\n      addNewCards(data) {\n        return fetch(`${this._url}/cards`, {\n          method: \"POST\",\n          headers: this._headers,\n          body: JSON.stringify({\n            name: data.name,\n            link: data.link,\n          }),\n        }).then((res) => this._checkResponse(res));\n    }\n    \n      //добавить лайк\n      sendLike(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n          method: \"PUT\",\n          headers: this._headers,\n        }).then((res) => this._checkResponse(res));\n    }\n    \n      //убрать лайк\n      deleteLike(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n          method: \"DELETE\",\n          headers: this._headers,\n        }).then((res) => this._checkResponse(res));\n    }\n    \n      //удалить конкретную карточку\n      deleteCardApi(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`, {\n          method: \"DELETE\",\n          headers: this._headers,\n        }).then((res) => this._checkResponse(res));\n    }\n    \n      //изменить аватар\n      setUserAvatar(data) {\n        return fetch(`${this._url}/users/me/avatar`, {\n          method: \"PATCH\",\n          headers: this._headers,\n          body: JSON.stringify({\n            avatar: data.avatar,\n          }),\n        }).then((res) => this._checkResponse(res));\n    }\n    \n      //проверка ответа, вывод ошибки и  ее статус кода\n      _checkResponse(res) {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(\n          `Ошибка : ${res.status}`\n        );\n    }\n    \n}\n\n\n\nconst api = new Api({\n  adress: 'https://mesto.nomoreparties.co/v1/cohort-71',\n  token: 'ec265280-7716-4c4b-b105-f3dcaf615320'\n})\n\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}